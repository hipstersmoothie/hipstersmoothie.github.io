(window.webpackJsonp=window.webpackJsonp||[]).push([[11,17],{127:function(e,a,n){"use strict";n.r(a),n.d(a,"meta",function(){return p});var t=n(0),o=n.n(t),s=n(1);function m(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p={publishDate:"2018-10-25T08:45:08.121Z",title:"Using Next.js with Github Pages"};a.default=function(e){var a=e.components;m(e,["components"]);return o.a.createElement(s.MDXTag,{name:"wrapper",components:a},o.a.createElement(s.MDXTag,{name:"p",components:a},"Getting ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next.js")," to work on a domain at anything other than the root takes a little extra configuration. This post will walk you though the steps to get it up and running."),o.a.createElement(s.MDXTag,{name:"h2",components:a},"Prefix Static Assets"),o.a.createElement(s.MDXTag,{name:"p",components:a},"Github project pages urls are deployed to ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"https://your-username.github.io/your-project"),". To get ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next.js")," to properly serve all of your assets (js, css, html) your must include a ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"assetPrefix")," in your ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next.config.js"),"."),o.a.createElement(s.MDXTag,{name:"pre",components:a},o.a.createElement(s.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js",metaString:""}},o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," debug = process.env.NODE_ENV !== ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'production'"),";\n",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," assetPrefix = debug ? ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"''")," : ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'/your_prefix/'"),";\n\n",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-built_in"}},"module"),".exports = {\n  assetPrefix\n};")),o.a.createElement(s.MDXTag,{name:"p",components:a},"Now you will find that when you deploy your project website to github pages all the static assets work, but if you try clicking anything using the ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"@next/link")," component you'll get a 404. If you have any pages with images served from the static folder you will also notice that they do not work either!"),o.a.createElement(s.MDXTag,{name:"h2",components:a},"Prefix URLs"),o.a.createElement(s.MDXTag,{name:"p",components:a},"So it seems to get our github project page to work we'll also need to all the URLs in our app to be prefixed. This includes both anchor ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"href"),"s and img ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"src"),"s. You could do this yourself, or you could install ",o.a.createElement(s.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/hipstersmoothie/next-prefixed"}},o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"a"},"next-prefixed"))," a package I published to address this issue."),o.a.createElement(s.MDXTag,{name:"h3",components:a},"Configure"),o.a.createElement(s.MDXTag,{name:"p",components:a},"First install ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next-prefixed")," and add the following to your ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next.config.js"),"."),o.a.createElement(s.MDXTag,{name:"pre",components:a},o.a.createElement(s.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js",metaString:""}},o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," debug = process.env.NODE_ENV !== ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'production'"),";\n",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," assetPrefix = debug ? ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"''")," : ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'/your_prefix/'"),";\n\n",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-built_in"}},"module"),".exports = withPlugins([withCSS, withMDX, withBlog], {\n  assetPrefix,\n  ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-attr"}},"publicRuntimeConfig"),": {\n    assetPrefix\n  }\n});")),o.a.createElement(s.MDXTag,{name:"p",components:a},o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"publicRuntimeConfig")," will expose the ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"assetPrefix")," to our ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next.js")," app."),o.a.createElement(s.MDXTag,{name:"h3",components:a},"Usage"),o.a.createElement(s.MDXTag,{name:"p",components:a},"Now that you have fully configured your ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"assetPrefix")," all thats left to do is switch out all ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"@next/link")," components and ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"img")," tags with the prefixed versions."),o.a.createElement(s.MDXTag,{name:"pre",components:a},o.a.createElement(s.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js",metaString:""}},o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"import")," { Link, Image } ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"from")," ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'next-prefixed'"),";\n\n",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," Example = ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-function"}},o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-params"}},"()")," =>")," (\n  ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"xml"}},o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-tag"}},"<",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-name"}},"div"),">"),"\n    "),'<Image src="/static/jimp.png" alt=\'Code example\' />\n    <Link href="/blog" />\n  </div>\n);')),o.a.createElement(s.MDXTag,{name:"p",components:a},"These components use ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"assetPrefix")," to prefix all the URLs so they resolve in your github-pages app correctly. Now your project page links work!"),o.a.createElement(s.MDXTag,{name:"h3",components:a},"Manual Prefix"),o.a.createElement(s.MDXTag,{name:"p",components:a},"If you need to manually prefix some URLs that aren't covered by ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next-prefixed"),"'s components, it also exports ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"prefixUrl"),". This function simply joins the ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"assetPrefix")," with whatever path is supplied to it."),o.a.createElement(s.MDXTag,{name:"pre",components:a},o.a.createElement(s.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js",metaString:""}},o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"import")," { prefixURL } ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"from")," ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'next-prefixed'"),";\n\nprefixURL(",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'/blog'"),"); ",o.a.createElement(s.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// => my_prefix/blog"))),o.a.createElement(s.MDXTag,{name:"h1",components:a},"All done!"),o.a.createElement(s.MDXTag,{name:"p",components:a},"Now your github project page should work with ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"next.js")," without a flaw!"))}},302:function(e,a,n){__NEXT_REGISTER_PAGE("/blog/next-pages",function(){return e.exports=n(127),{page:e.exports.default}})}},[[302,1,0]]]);